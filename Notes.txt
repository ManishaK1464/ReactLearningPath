vite is a lightweight web server that allows us to run out react applications

npm create vite@latest

give name selections to framework etc cd .\frontend\ npm install installed in local machine bring dependencies 
there

node modules will have packages  npm run dev development server we can view it

react javascript library reusable ui components without react you manually update DOM html when data changes 
vite starts a development server instantly it handles things which react cant file bundling dev servers 
React is the framework (for building your UI).
Vite is the tool (to run, build, and serve your React app efficiently).

index entry point 
<div whole react app will be placed 
it loads main.jsx using <script type="module">.
Tell the browser: “Run main.jsx to start the app.”

main.jsx (Bootstrapping the React App)
This is the first JavaScript file that runs.
It finds the <div id="root"> in index.html.
It renders your main React component (App.jsx) inside that div.
Responsibility:
Connect React to the HTML.
Start the app by saying:
ReactDOM.createRoot(document.getElementById('root')).render(<App />);

App.jsx (The Main Component)
This is your main React component.
It defines what your app looks like and which other components it uses. app.css get impoted

Browser loads index.html.

index.html runs main.jsx.

main.jsx says:

“Find the root div in the HTML.”

“Render the App component there.”

App.jsx decides what the UI looks like.

Styles from index.css (global) and App.css (specific) make it look good.

HTML → Skeleton.

main.jsx → Starts React.

App.jsx → Decides what to show.

Browser loads index.html.

index.html calls main.jsx with <script type="module">.

main.jsx finds the <div id="root"> and puts <App /> inside it.

App.jsx defines what <App /> actually shows.

CSS files style everything.

javascript and html is jsx




function App() {    a component is really just any function in js that returns some kind of jsx code  and one  root parent element div one only
  return (
    <div> </div>
  )
}


use fragment if you want to use multiple div inside ur function <>  </> wraps 

wrap this reusable component and use it <Text /> like this in div 

prop component fragment 

 <h3 className="movie-title">{movie.title}</h3> inside a brace is variable 
 Think of props like labels stuck on the box telling you:


 <div className="movie-card"> in css you a´can give effects
 .movie-card {
  border: 1px solid black;
  padding: 10px;
}


conditional rendering 
.map array of values key and value id need not be number 



npm create vite@latest
folder name lower case only



